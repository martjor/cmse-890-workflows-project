import yaml
import pandas as pd
import peppy
import numpy as np
import sys 
import os
import networkx as nx
from scipy.sparse import save_npz

configfile: "config/config.yaml"

def cartesian_product(*arrays):
    meshgrids = np.meshgrid(*arrays,indexing='ij')
    cart_prod = np.stack(meshgrids,axis=-1)
    cart_prod = cart_prod.reshape(-1,len(arrays))
    return cart_prod

def num_graphs(metric_config):
    n_inputs = eval(metric_config['inputs']).shape[0]
    n_graphs = metric_config['n_graphs']

    return n_inputs * n_graphs 

def get_target(table,graph):
    '''Retrieves the target metric to generate a graph
    '''
    data = pd.read_csv(table)
    data.set_index('file',inplace=True)
    return data.at[graph,'target']

metrics = config['metrics']

rule all:
    input:
        "data/density/simulations/sir/sim_results_1.npy"

rule index:
    output:
        filename="data/{metric}/samples.csv"
    run:
        # Retrieve inputs
        metric = wildcards.metric
        inputs = eval(config[metric]['inputs'])
        n_graphs = config[metric]['n_graphs']

        # Construct dataframe
        parameters = np.tile(inputs,n_graphs)
        df = pd.DataFrame(parameters,columns=["target"])
        df['file'] = 'graph_' + np.arange(df.shape[0]).astype(str) + '.npz'
        df.set_index('file',inplace=True)

        # Save dataframe
        df.to_csv(output.filename)

rule sample:
    input:
        table="data/{metric}/samples.csv"
    output:
        filename="data/{metric}/graphs/{graph}"
    params:
        parameter=lambda w, input: get_target(input.table,w.graph),
        n_vertices=config['n_vertices']
    script:
        "scripts/generate_graph.py"

rule simulate:
    input:
        "data/{metric}/graphs/graph_{index}.npz"
    output:
        "data/{metric}/simulations/{simulation}/sim_results_{index}.npy"
    params:
        tau=0.1,
        gamma=0.1,
        n_steps=1000,
        n_trials=1
    script:
        "scripts/simulate_{wildcards.simulation}.py"


# rule characterize:
#     input:
#         "data/{metric}/graphs/graph_{i}.npz"
#     output:
#         filename="data/{metric}/properties.csv"
#     run:
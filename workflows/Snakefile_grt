import numpy as np
import pandas as pd

configfile: "config/config_grts.yaml"

def cartesian_product(*arrays):
    meshgrids = np.meshgrid(*arrays,indexing='ij')
    cart_prod = np.stack(meshgrids,axis=-1)
    cart_prod = cart_prod.reshape(-1,len(arrays))
    return cart_prod

def generate_samples(method_config):
    '''Generates the samples for the method
    '''
    samples = cartesian_product(eval(*method_config['parameters'].values()))
    samples = np.tile(samples,(method_config['n_graphs'],1))

    samples = pd.DataFrame(samples,columns=method_config['parameters'].keys())
    samples.rename(lambda idx: f"graph_{idx}", inplace=True)

    return samples

# Retrieve methods to analyze
methods = config['methods'].keys()

# Generate the samples for each method
samples = {method: generate_samples(config['methods'][method]) for method in methods}

rule all:
    input:
        # "results/giant_hamsterster/sparsification/params_reduction.csv",
        # "results/giant_hamsterster/sparsification/graph_metrics.csv",
        # "results/giant_hamsterster/sparsification/graph_distribution_degree.csv",
        # "results/giant_hamsterster/sparsification/graph_distribution_distance.csv",
        # "results/giant_hamsterster/sparsification/sir_qois.csv"
        "results/giant_hamsterster/sparsification/plots/targets.png"

rule summarize:
    input:
        files=lambda w:[f"data/networks/{w.graph}/{w.method}/{idx}/{w.file}.yaml" for idx in samples[w.method].index]
    output:
        "results/{graph}/{method}/{file}.csv"
    script:
        "scripts/summarize.py"

rule graph_reduce:
    input:
        "{graph}/graph_adjacency.npz",
    output:
        "{graph}/{method}/{graph_idx}/graph_adjacency.npz",
        "{graph}/{method}/{graph_idx}/params_reduction.yaml"
    params:
        method_parameters=lambda w: samples[w.method].loc[w.graph_idx].to_dict()
    script:
        "scripts/graph_reduce.py"

rule graph_metrics:
    input:
        "{path}/graph_adjacency.npz"
    output:
        "{path}/graph_metrics.yaml"
    script:
        "scripts/graph_characterize.py"

rule graph_distribution:
    input:
        "{path}/graph_adjacency.npz"
    output:
        "{path}/distribution_{quantity}.npy"
    script:
        "scripts/graph_distribution.py"

rule graph_distribution_metrics:
    input:
        "{path}/distribution_{quantity}.npy"
    output:
        "{path}/distribution_{quantity}.yaml"
    script:
        "scripts/graph_distribution_metrics.py"

rule model_simulate:
    input:
        "{path}/graph_adjacency.npz",
    output:
        "{path}/trajectories_{model}.npy"
    params:
        config=lambda w:config['models'][w.model]
    script:
        "scripts/simulation_{wildcards.model}_run.py"

rule model_qois_sir:
    input:
        "{path}/trajectories_sir.npy"
    output:
        "{path}/qois_sir.yaml"
    script:
        "scripts/model_qois_sir.py"

rule plot_reduction:
    input:
        expand("results/{{graph}}/{{method}}/{file}.csv",
            file=["params_reduction",
                  "graph_metrics",
                  "distribution_degree",
                  "distribution_distance",
                  "qois_sir"])
    output:
        "results/{graph}/{method}/plots/targets.png"
    notebook:
        "notebooks/analysis_reduction.py.ipynb"

rule graph_draw:
    input:
        "{path}/adjacency.npz"
    output:
        "{path}/drawing.png"
    script:
        "scripts/graph_draw.py"
